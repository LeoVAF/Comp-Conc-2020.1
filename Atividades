Atividade 1:
(3) Execute o programa hello.c várias vezes e observe os resultados impressos na tela. Há mudanças na ordem de execução das threads? Por que isso ocorre?
R: Sim, isso ocorre, como explicado nos vídeos, porque os fluxos de execução são escalonados pelo Sistema Operacional (SO) e enfileirados. Dessa forma, há um critério usado pelo SO que modifica a ordem dos fluxos no programa, fazendo essa alteração na ordem a cada vez que o programa estiver rodando. Podemos ver essa mudança marcando cada fluxo de execução com um identificador, mas sem o identificador, não é possível afirmar se há mudanças na ordem de execução dos fluxos.

Atividade 2:
(3) Execute o programa hello_arg.c várias vezes e observe os resultados impressos na tela. Qual foi a diferença em relação ao programa anterior? Por que foi necessário alocar espaço de memória para o argumento de cada thread?
R: Agora, podemos ver um número depois da impressão que serve como um identificador de cada fluxo, assim fica fácil ver que os fluxos mudam sua ordem de execução, já que há uma ordem fixa com o qual a variável thread obedece e ela não é satisfeita em toda execução do programa. A segunda pergunta é fundamental para entendermos o funcionamento da passagem de parâmetros com o ponteiro para void. Como estamos utilizando ponteiro, se modificarmos o valor para o qual o ponteiro está apontando, como é o nosso caso, as partes do código em que o ponteiro é utilizado serão afetadas, independente do seu escopo. Sendo assim, se no primeiro fluxo criado, o valor apontado por esse ponteiro void é um inteiro igual a 0 (supondo o valor sendo igual ao valor da variável thread), no próximo ciclo do for, esse valor será modificado para 1, já que a variável thread é incrementada a cada ciclo, e isso faz uma modificação no valor apontado por esse ponteiro. Como concluímos na primeira atividade e podemos confirmar na segunda atividade, a ordem de execução, a princípio, é aleatória, sendo assim, podemos esperar problemas na passagem de um só ponteiro compartilhado com diversos fluxos com o objetivo de indentificá-los. Isso poderia dar certo, se, no momento de criação do fluxo, já houvesse a execução do mesmo.

Atividade 3:
(3) Execute o programa hello_args.c várias vezes e observe os resultados impressos na tela. O programa funcionou como esperado?
R: Sim, a estrutura está funcioando corretamente. Um fator importante foi o uso do malloc() que gera um novo ponteiro genérico (void) a cada ciclo do for.

Atividade 4:
(3) Execute o programa hello_join.c várias vezes e observe os resultados impressos na tela. O que aconteceu de diferente em relação às versões anteriores?
R: Agora, o fluxo principal espera todos os fluxos secundários terminarem, com o uso da função pthread_join.
